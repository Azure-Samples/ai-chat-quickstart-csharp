@page
@{
    ViewData["Title"] = "Home page";
}

<div id="messages" class="px-4 pb-4 pt-2 flex-grow-1 overflow-y-auto overflow-x-hidden align-items-stretch">

    <template id="message-template-user">
        <div class="toast-container position-static w-100 d-flex flex-column align-items-stretch">
                <div class="toast fade show w-75 rounded-3 align-self-end">
                    <div class="toast-header text-light background-user">
                        <i class="bi bi-person me-1" aria-hidden="true"></i>
                        <strong class="me-auto text-capitalize">
                            You
                        </strong>
                    </div>
                    <span class="toast-body message-file">
                    </span>
                    <div class="toast-body message-content">
                    </div>
                </div>
        </div>
    </template>

    <template id="message-template-assistant">
        <div class="toast-container position-static w-100 d-flex flex-column align-items-stretch">
                <div class="toast fade show w-75 rounded-3 align-self-start">
                    <div class="toast-header text-light background-assistant">
                        <i class="bi bi-robot me-1" aria-hidden="true"></i>
                        <strong class="me-auto text-capitalize">
                            Assistant
                        </strong>
                    </div>
                    <div class="toast-body message-content">
                        <em class="typing-indicator">Typing...</em>
                    </div>
                </div>
        </div>
    </template>


</div>
<div id="chat-area" class="text-light px-4 py-2 rounded-top-5 text-dark d-flex flex-column justify-content-center background-user">
    <form id="chat-form">
        <div class="input-group">
            <label for="file" class="form-label" style="color:white">Temperature:</label>
            <div class="input-group">
                <i class="bi bi-thermometer-sun input-group-text" aria-hidden="true"></i>
                <input id="temperature" name="temperature" class="form-control form-control-sm" type="number" value="0.5" step="0.1" min="0.1" max="1.0" aria-label="Temperature"></input>
            </div>
            <label for="file" class="form-label" style="color:white">Upload image:</label>
            <div class="input-group">
                <i class="bi bi-file-earmark-text input-group-text" aria-hidden="true"></i>
                <input id="file" name="file" class="form-control form-control-sm" type="file" accept="image/png,image/jpeg" aria-label="Upload File"></input>
            </div>
            <label for="message" class="form-label bi" style="color:white">Ask a question about the image:</label>
            <div class="input-group">
                <i class="bi bi-body-text input-group-text" aria-hidden="true"></i>
                <input id="message" name="message"  class="form-control form-control-sm" type="text" rows="1" placeholder="<Your Message>" aria-label="Ask ChatBot"></input>
                <button type="submit" class="btn btn-outline-light">
                    Send
                    <i class="bi bi-send-fill" aria-hidden="true"></i>
                </button>
            </div>
        </div>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/showdown@@2.1.0/dist/showdown.min.js"></script>

<script>
    const form = document.getElementById("chat-form");
    const messageInput = document.getElementById("message");
    const targetContainer = document.getElementById("messages");
    const userTemplate = document.querySelector('#message-template-user');
    const assistantTemplate = document.querySelector('#message-template-assistant');
    const converter = new showdown.Converter();
    const messages = [];

    const toBase64 = file => new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
    });

    form.addEventListener("submit", async function(e) {
        e.preventDefault();

        const file = document.getElementById("file").files[0];
        const fileData = file ? await toBase64(file) : null;
        
        const message = messageInput.value;

        const userTemplateClone = userTemplate.content.cloneNode(true);
        userTemplateClone.querySelector(".message-content").innerText = message;
        if (file) {
            const img = document.createElement("img");
            img.src = fileData;
            img.className = "img-thumbnail";
            img.width = 300;
            userTemplateClone.querySelector(".message-file").appendChild(img);
        }
        targetContainer.appendChild(userTemplateClone);

        const assistantTemplateClone = assistantTemplate.content.cloneNode(true);
        let messageDiv = assistantTemplateClone.querySelector(".message-content");
        targetContainer.appendChild(assistantTemplateClone);

        messages.push({
            "role": "user",
            "content": message
        });

        try {
            const streamResponse = await fetch("/chat/stream", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({"messages": messages, "context": {"imageUri": fileData}})
            });

            let answer = "";
            for await (const response of readJSONStream(streamResponse.body)) {
                if (response) {
                    // Clear out the DIV if its the first answer chunk we've received
                    if (answer == "") {
                        messageDiv.innerHTML = "";
                    }
                    answer += response;
                    messageDiv.innerHTML = converter.makeHtml(answer);
                    messageDiv.scrollIntoView();
                }
            }
            messages.push({
                "role": "assistant",
                "content": answer
            });

            messageInput.value = "";
        } catch (error) {
            messageDiv.innerHTML = "Error: " + error;
        }
    });

    async function* readJSONStream(readableStream) {
        const reader = readableStream.getReader();
        let decoder = new TextDecoder('utf-8');
        while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            var streamedResult = decoder.decode(value, { stream: true });
            var results = streamedResult.split(',');
            for (chunk of results) {
                try {
                    yield JSON.parse(chunk);
                } catch (e) {
                    // Not a valid JSON object
                }
            }
        }
    }
</script>